name: Automated Versioning and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the full history, including tags

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version setuptools wheel

      - name: Fetch All Tags
        run: git fetch --tags

      - name: Get Last Tag
        id: last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
          # Remove the "v" prefix if it exists
          CLEAN_TAG=${LAST_TAG#v}
          echo "CLEAN_TAG=$CLEAN_TAG" >> $GITHUB_ENV
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          echo "Last tag is $CLEAN_TAG"

      - name: Determine Version Bump
        id: version_bump
        run: |
          if git log --pretty=format:%s ${{ env.LAST_TAG }}...HEAD | grep -q '^feat'; then
            echo "VERSION_BUMP=minor" >> $GITHUB_ENV
          elif git log --pretty=format:%s ${{ env.LAST_TAG }}...HEAD | grep -q '^fix'; then
            echo "VERSION_BUMP=patch" >> $GITHUB_ENV
          else
            echo "VERSION_BUMP=patch" >> $GITHUB_ENV
          fi
          echo "Version bump determined: ${{ env.VERSION_BUMP }}"
      - name: Setup git credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Bump Version
        run: |
          bump2version --current-version ${{ env.CLEAN_TAG }} ${{ env.VERSION_BUMP }} --allow-dirty setup.py
        env:
          VERSION_BUMP: ${{ env.VERSION_BUMP }}

      - name: Push Changes and Tags
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        run: |
          git push origin main --tags

      - name: Get New Version
        id: new_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "New version is $VERSION"

      - name: Validate New Tag
        run: |
          if git tag | grep -q "^${{ env.VERSION }}$"; then
            echo "Tag ${{ env.VERSION }} already exists. Exiting."
            exit 1
          fi

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        run: |
          gh release create "${{ env.VERSION }}" --notes "Automated release for version ${{ env.VERSION }}."
