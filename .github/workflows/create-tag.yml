name: Create Tag and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create_tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the full history, including tags

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Setup Git Credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch All Tags
        run: git fetch --tags

      - name: Determine Version
        id: version
        run: |
          # Extract version from PR title (assuming it starts with "Version Bump: vX.Y.Z")
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ Version\ Bump:\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="v${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "version_bump=true" >> $GITHUB_ENV
          else
            echo "PR title does not indicate a version bump. Skipping tag creation."
            echo "version_bump=false" >> $GITHUB_ENV
          fi

      - name: Validate Version
        id: validate
        if: env.version_bump == 'true'
        run: |
          # Ensure the extracted version doesn't already exist as a tag
          VERSION="${{ env.VERSION }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Version $VERSION already exists. Skipping tag creation."
            echo "create_tag=false" >> $GITHUB_ENV
          else
            echo "Version $VERSION is valid. Proceeding with tag creation."
            echo "create_tag=true" >> $GITHUB_ENV
          fi

      - name: Create Tag
        if: env.version_bump == 'true' && env.create_tag == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
          echo "Creating tag $VERSION"
          git tag -a $VERSION -m "Release $VERSION"
          git push origin --tags $VERSION
          gh release create $VERSION --target main --title $VERSION --notes "Release $VERSION"

